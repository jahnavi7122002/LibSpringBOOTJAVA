package com.example.lib.Unit;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.lib.model.User;
import com.example.lib.Service.UserService;
import com.example.lib.Repository.UserRepository;

public class UserServiceTest {

    @InjectMocks
    private UserService userService;
   

    @Mock
    private UserRepository userRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllUsers() {
        // Arrange
        List<User> users = List.of(new User(1L, "user1", "password1", Set.of("ROLE_USER")));
        when(userRepository.findAll()).thenReturn(users);

        // Act
        List<User> result = userService.getAllUsers();

        // Assert
        assertEquals(1, result.size());
        assertEquals("user1", result.get(0).getUsername());
    }

    @Test
    void testGetUserById() {
        // Arrange
        User user = new User(1L, "user1", "password1", Set.of("ROLE_USER"));
        when(userRepository.findById(1L)).thenReturn(Optional.of(user));

        // Act
        Optional<User> result = userService.getUserById(1L);

        // Assert
        assertTrue(result.isPresent());
        assertEquals("user1", result.get().getUsername());
    }

    @Test
    void testCreateUser() {
        // Arrange
        User user = new User((0, "user1", "password1", Set.of("ROLE_USER"));
        User savedUser = new User(1L, "user1", "encodedPassword", Set.of("ROLE_USER"));
        when(passwordEncoder.encode(user.getPassword())).thenReturn("encodedPassword");
        when(userRepository.save(user)).thenReturn(savedUser);

        // Act
        User result = userService.createUser(user);

        // Assert
        assertEquals(1L, result.getId());
        assertEquals("encodedPassword", result.getPassword());
    }

    @Test
    void testUpdateUser() {
        // Arrange
        User existingUser = new User(1L, "user1", "password1",Set.of("ROLE_USER"));
        User updatedUser = new User(0, "updatedUser", "newPassword", Set.of("ROLE_ADMIN"));
        when(userRepository.findById(1L)).thenReturn(Optional.of(existingUser));
        when(passwordEncoder.encode(updatedUser.getPassword())).thenReturn("encodedNewPassword");
        when(userRepository.save(existingUser)).thenReturn(existingUser);

        // Act
        User result = userService.updateUser(1L, updatedUser);

        // Assert
        assertEquals("updatedUser", result.getUsername());
        assertEquals("encodedNewPassword", result.getPassword());
    }

    @Test
    void testDeleteUser() {
        // Act
        userService.deleteUser(1L);

        // Assert
        verify(userRepository, times(1)).deleteById(1L);
    }

    @Test
    void testFindByUsername() {
        // Arrange
        User user = new User(1L, "user1", "password1", Set.of("ROLE_USER"));
        when(userRepository.findByUsername("user1")).thenReturn(user);

        // Act
        Optional<User> result = userService.findByUsername("user1");

        // Assert
        assertTrue(result.isPresent());
        assertEquals("user1", result.get().getUsername());
    }

    @Test
    void testIsPasswordCorrect() {
        // Arrange
        String rawPassword = "password";
        String encodedPassword = "encodedPassword";
        when(passwordEncoder.matches(rawPassword, encodedPassword)).thenReturn(true);

        // Act
        boolean result = userService.isPasswordCorrect(rawPassword, encodedPassword);

        // Assert
        assertTrue(result);
    }
}
